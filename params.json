{"name":"Videogrep","tagline":"Automatic supercuts with python.","body":"Videogrep\r\n=========\r\n\r\nVideogrep searches through dialog in video files (using .srt subtitle tracks or pocketsphinx transcriptions) and makes supercuts based on what it finds.\r\n\r\n## New!\r\nVideogrep now has an experimental graphic interface (Mac only). Download it here: [http://saaaam.s3.amazonaws.com/VideoGrep.app.zip](http://saaaam.s3.amazonaws.com/VideoGrep.app.zip)\r\n\r\n##Requirements\r\n\r\nInstall with pip\r\n```\r\npip install videogrep\r\n```\r\nInstall [ffmpeg](http://ffmpeg.org/) with Ogg/Vorbis support. If you're on a mac with homebrew you can install ffmpeg with:\r\n```\r\nbrew install ffmpeg --with-libvpx --with-libvorbis\r\n```\r\n\r\n(OPTIONAL) Install pocketsphinx for word-level transcriptions. On a mac:\r\n```\r\nbrew tap watsonbox/cmu-sphinx\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-sphinxbase\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-sphinxtrain # optional\r\nbrew install --HEAD watsonbox/cmu-sphinx/cmu-pocketsphinx\r\n```\r\n\r\n##How to use it\r\nThe most basic use:\r\n```\r\nvideogrep --input path/to/video_or_folder --search 'search phrase'\r\n```\r\nYou can put any regular expression in the search phrase.\r\n\r\nYou can also search for part-of-speech tags using Pattern. See the [Pattern-Search documentation](http://www.clips.ua.ac.be/pages/pattern-search) for some details about how this works, and the [Penn Tree bank tag set](http://www.clips.ua.ac.be/pages/mbsp-tags) for a list of usuable part-of-speech tags. For example the following will search for every line of dialog that contains an adjective (JJ) followed by a singular noun (NN):\r\n```\r\nvideogrep --input path/to/video_or_folder --search 'JJ NN' --search-type pos\r\n```\r\nYou can also do a [hypernym](https://en.wikipedia.org/wiki/Hypernym) search - which essentially searches for words that fit into a specific category. The following, for example, will search for any line of dialog that references a liquid (like water, coffee, beer, etc.):\r\n```\r\nvideogrep --input path/to/video_or_folder --search 'liquid' --search-type hyper\r\n```\r\n\r\n**NOTE: videogrep requires the subtitle track and the video file to have the exact same name, up to the extension.** For example, my_movie.mp4 and my_movie.srt will work, my_movie.mp4 and my_movie_subtitle.srt will not work.\r\n\r\n###Options\r\n\r\nvideogrep can take a number of options:\r\n\r\n####--input / -i\r\nVideo or subtitle file, or folder containing multiple files\r\n\r\n####--output / -o\r\nName of the file to generate. By default this is \"supercut.mp4\"\r\n\r\n####--search / -s\r\nSearch term\r\n\r\n####--search-type / -st\r\nType of search you want to perform. There are three options:\r\n* re: [regular expression](http://www.pyregex.com/) (this is the default).\r\n* pos: part of speech search (uses [pattern.search](http://www.clips.ua.ac.be/pages/pattern-search)). For example 'JJ NN' would return all lines of dialog that contain an adjective followed by a noun.\r\n* hyper: hypernym search. For example 'body parts' grabs all lines of dialog that reference a body part\r\n* word: extract individual words - for multiple words use the '|' symbol (requires pocketsphinx).\r\n* franken: create a \"frankenstein\" sentence (requires pocketsphinx)\r\n* fragment: multiple words with allowed wildcards like 'blue \\*' (requires pocketsphinx)\r\n\r\n####--max-clips / -m\r\nMaximum number of clips to use for the supercut\r\n\r\n####--demo / -d\r\nShow the search results without making the supercut\r\n\r\n####--randomize / -r\r\nRandomize the order of the clips\r\n\r\n####--padding / -p\r\nPadding in milliseconds to add to the start and end of each clip\r\n\r\n####--transcribe / -tr\r\nTranscribe the video using audiogrep/pocketsphinx. You must install pocketsphinx first!\r\n\r\n####--use-transcript / -t\r\nUse the pocketsphinx transcript rather than a subtitle file for searching. If this is enabled you can do\r\nword-level searches.\r\n\r\n##Samples\r\n* [All the instances of the phrase \"time\" in the movie \"In Time\"](https://www.youtube.com/watch?v=PQMzOUeprlk)\r\n* [All the one to two second silences in \"Total Recall\"](https://www.youtube.com/watch?v=qEtEbXVbYJQ)\r\n* [The President's former press secretary telling us what he can tell us](https://www.youtube.com/watch?v=D7pymdCU5NQ)\r\n\r\n###Use it as a module\r\n\r\n```\r\nfrom videogrep import videogrep\r\n\r\nvideogrep.videogrep('path/to/your/files','output_file_name.mp4', 'search_term', 'search_type')\r\n```\r\nThe videogrep module accepts the same parameters as the command line script. To see the usage check out the source.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}